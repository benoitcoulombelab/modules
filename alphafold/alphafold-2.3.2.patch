diff --git a/run_alphafold.py b/run_alphafold.py
index 0d89bfb..147b300 100644
--- a/run_alphafold.py
+++ b/run_alphafold.py
@@ -107,6 +107,12 @@ flags.DEFINE_enum('model_preset', 'monomer',
                   'Choose preset model configuration - the monomer model, '
                   'the monomer model with extra ensembling, monomer model with '
                   'pTM head, or multimer model')
+flags.DEFINE_enum('step', 'all',
+                  ['prepare', 'alphafold', 'all'],
+                  'Choose processing step - '
+                  'prepare feature dictionary (does not require GPU) or '
+                  'run AlphaFold from based on prepare step or '
+                  'run all steps')
 flags.DEFINE_boolean('benchmark', False, 'Run multiple JAX model evaluations '
                      'to obtain a timing that excludes the compilation time, '
                      'which should be more indicative of the time required for '
@@ -193,15 +199,23 @@ def predict_structure(
 
   # Get features.
   t_0 = time.time()
-  feature_dict = data_pipeline.process(
-      input_fasta_path=fasta_path,
-      msa_output_dir=msa_output_dir)
-  timings['features'] = time.time() - t_0
+  if FLAGS.step != 'alphafold':
+    feature_dict = data_pipeline.process(
+        input_fasta_path=fasta_path,
+        msa_output_dir=msa_output_dir)
+    timings['features'] = time.time() - t_0
 
   # Write out features as a pickled dictionary.
   features_output_path = os.path.join(output_dir, 'features.pkl')
-  with open(features_output_path, 'wb') as f:
-    pickle.dump(feature_dict, f, protocol=4)
+  if FLAGS.step != 'alphafold':
+    with open(features_output_path, 'wb') as f:
+      pickle.dump(feature_dict, f, protocol=4)
+  else:
+    with open(features_output_path, 'rb') as f:
+      feature_dict = pickle.load(f)
+
+  if FLAGS.step == 'prepare':
+    return
 
   unrelaxed_pdbs = {}
   unrelaxed_proteins = {}
@@ -327,6 +341,8 @@ def main(argv):
   if len(argv) > 1:
     raise app.UsageError('Too many command-line arguments.')
 
+  print(f"Running AlphaFold with step {FLAGS.step}")
+
   for tool_name in (
       'jackhmmer', 'hhblits', 'hhsearch', 'hmmsearch', 'hmmbuild', 'kalign'):
     if not FLAGS[f'{tool_name}_binary_path'].value:
